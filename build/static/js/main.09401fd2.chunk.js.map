{"version":3,"sources":["types.ts","constants.ts","GoogleAuth.tsx","hooks.ts","utils.tsx","MapContainer.tsx","WardDetails.tsx","WeightingsEditor.tsx","DataContainer.tsx","indexedDB.ts","non-hooks.ts","index.tsx"],"names":["ScoreType","CLIENT_ID","API_KEY","DISCOVERY_DOCS","SCOPE","NON_COMPARISON_FIELDS","NORMALISED_EXTENSION","NORMALISED_EXTENSION_REGEXP","RegExp","RANKING_EXTENSION","RANKING_EXTENSION_REGEXP","GEO_JSON_FILE","WARD_STATS_FILE","WARD_STATS_RANGE","useStyles","makeStyles","theme","createStyles","button","marginTop","spacing","GoogleAuth","_ref","apiKey","clientId","discoveryDocs","scope","_ref$signedInState","Object","slicedToArray","signedInState","isSignedIn","updateIsSignedIn","useTheme","classes","googleApi","React","handleSignIn","current","auth2","getAuthInstance","signIn","alert","handleSignOut","signOut","gapi","load","client","init","then","listen","get","catch","err","console","error","react","Button","className","variant","onClick","color","ApiResponse","response","classCallCheck","this","value","createClass","key","status","data","loading","concat","loaded","mapper","useDebounce","calc","dependencies","wait","maxWait","_React$useState15","_React$useState16","refreshToken","setRefreshToken","_React$useState17","_React$useState18","maxWaitActive","setMaxWaitActive","debounceTimeout","maxWaitTimeout","window","setTimeout","clearInterval","clearTimeout","toConsumableArray","normaliseAll","dataArray","keys","filter","header","includes","size","length","forEach","sort","dataA","dataB","dataItem","index","addRankings","stats","minMax","reduce","map","max","Math","min","Infinity","_","range","getNormalisedStats","objectSpread","objectSoFar","defineProperty","normalise","csvToObjects","csv","firstRow","slice","calculateScore","weightings","properties","scoreSoFar","_weightings$header","weight","type","headerName","Normalised","Rank","MapContainer","minScore","scoreRange","geoJsonToRender","selectedWard","setSelectedWard","_React$useState","_React$useState2","zoom","setZoom","styleFeatures","callback","_React$useState11","_React$useState12","_React$useState13","_React$useState14","useDebouncedCallback","feature","isSelected","score","stroke","opacity","fill","fillOpacity","abs","fillColor","round","onZoom","event","target","getZoom","layer","es_Map","center","TileLayer","attribution","url","GeoJSON","style","IGNORED_FIELDS","drawer","padding","WardDetails","rank","total","onSwipeFactory","ward","content","Typography","component","test","SwipeableDrawer","anchor","open","onClose","onOpen","fab","position","bottom","left","entry","display","flexWrap","marginBottom","WeightingsEditor","setWeightings","isOpen","setIsOpen","onClickToggle","onChangeWeightFactory","parseFloat","currentTarget","onChangeScoreTypeFactory","parseInt","Fab","aria-label","Edit","TextField","label","onChange","FormControl","InputLabel","Select","native","Value","DataContainer","sheetData","geoJsonData","wardCode","_useDebounce","_geoJsonToRender$redu","_ref2","_ref3","maxScore","rankings","Map","_ref4","_ref5","_ref6","scoreA","_ref7","_ref8","_ref9","_React$useMemo","MapContainer_MapContainer","WardDetails_WardDetails","WeightingsEditor_WeightingsEditor","OBJECT_STORE_MODIFIER","getIndexedDBValue","dbPromise","fallback","deserialiser","db","Promise","resolve","readRequest","transaction","name","objectStore","onerror","onsuccess","result","add","id","getSheetData","_x","_getSheetData","apply","arguments","_callee","sheetName","sheetDetails","regenerator_default","a","wrap","_context","prev","next","reject","drive","files","list","q","pageSize","fields","sent","Error","sheets","spreadsheets","values","spreadsheetId","majorDimension","valueRenderOption","abrupt","stop","_callee2","filename","geoJSONFileDetails","geoJSONDataResponse","_context2","fileId","alt","convertGeoJSONData","_x3","_convertGeoJSONData","_callee3","responsePromise","_context3","features","dbName","createMuiTheme","rootElement","document","getElementById","render","_useFileUploadButton","fileInputRef","_React$useState9","_React$useState10","setResponse","fileReader","reader","FileReader","onloadend","JSON","parse","ref","file","readAsText","useFileUploadButton","_useFileUploadButton2","_React$useState3","preload","_React$useState4","sheetDataResponse","setSheetDataResponse","_React$useState5","_React$useState6","geoJsonDataResponse","setGeoJsonDataResponse","databaseName","request","indexedDB","info","onupgradeneeded","osName","createObjectStore","keyPath","oncomplete","makeConvertedSheetData","asyncToGenerator","mark","wrapInApiResponse","valuePromise","newValue","makeGeoJsonData","_x2","_getDriveDocument","getDriveDocument","_React$useState7","_React$useState8","ThemeProvider","Container","GoogleAuth_GoogleAuth","DataContainer_DataContainer","isLoading"],"mappings":"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","file":"static/js/main.09401fd2.chunk.js","sourcesContent":["import { Feature, Polygon } from \"geojson\";\nimport { WARD_CODE_FIELD, WARD_NAME_FIELD } from \"./constants\";\n\nexport type ApiResponseValue<T> =\n  | {\n      status: \"error\";\n      error: Error;\n    }\n  | {\n      status: \"loaded\";\n      data: T;\n    }\n  | {\n      status: \"loading\";\n    }\n  | {\n      status: \"preload\";\n    };\n\nexport class ApiResponse<T> {\n  public static preload<T>() {\n    return new ApiResponse<T>({ status: \"preload\" });\n  }\n  public static loading<T>() {\n    return new ApiResponse<T>({ status: \"loading\" });\n  }\n\n  public static error<T>(error: Error) {\n    return new ApiResponse<T>({ status: \"error\", error });\n  }\n\n  public static loaded<T>(data: T) {\n    return new ApiResponse<T>({ status: \"loaded\", data });\n  }\n\n  private value: ApiResponseValue<T>;\n\n  private constructor(response: ApiResponseValue<T>) {\n    this.value = response;\n  }\n\n  public data() {\n    return this.value.status === \"loaded\" ? this.value.data : null;\n  }\n\n  public error() {\n    return this.value.status === \"error\" ? this.value.error : null;\n  }\n\n  public isLoading() {\n    return this.value.status === \"loading\";\n  }\n\n  public isPreload() {\n    return this.value.status === \"preload\";\n  }\n\n  public load() {\n    if (this.value.status === \"preload\") {\n      return ApiResponse.loading<T>();\n    } else {\n      console.error(\n        `Cannot load an ApiResponse in the ${this.value.status} state.`\n      );\n      return this;\n    }\n  }\n\n  public resolve(data: T) {\n    if (this.value.status === \"loading\") {\n      return ApiResponse.loaded(data);\n    } else {\n      console.error(\n        `Cannot resolve an ApiResponse in the ${this.value.status} state.`\n      );\n      return this;\n    }\n  }\n\n  public fail(error: Error): ApiResponse<T> {\n    if (this.value.status === \"loading\") {\n      return ApiResponse.error(error);\n    } else {\n      console.error(\n        `Cannot fail an ApiResponse in the ${this.value.status} state.`\n      );\n      return this;\n    }\n  }\n\n  public map<U>(mapper: (input: T) => U) {\n    if (this.value.status === \"loaded\") {\n      return ApiResponse.loaded<U>(mapper(this.value.data));\n    }\n    return new ApiResponse<U>(this.value);\n  }\n}\n(window as any).ApiResponse = ApiResponse;\n\nexport type SheetData = Array<Array<number | string>>;\n\nexport interface IData {\n  [header: string]: string | number;\n}\n\nexport interface IWardData {\n  [WARD_CODE_FIELD]: string;\n  [WARD_NAME_FIELD]: string;\n  score: number;\n  [s: string]: string | number;\n}\n\nexport type Ward = Feature<Polygon, IWardData>;\n\nexport interface IWeightings {\n  [header: string]: {\n    weight: number;\n    type: ScoreType;\n  };\n}\n\nexport enum ScoreType {\n  Value,\n  Normalised,\n  Rank\n}\n\nexport type ConvertedGeoJSONData = Map<string, Feature<Polygon, IWardData>>;\n","export const CLIENT_ID =\n  \"978388352537-fnn94mu0emjd6tdme0tokctt80iludg7.apps.googleusercontent.com\";\nexport const API_KEY = \"AIzaSyCNKv31Uepktj0jpyZ7xZy_NofctPYxH9M\";\nexport const DISCOVERY_DOCS = [\n  \"https://sheets.googleapis.com/$discovery/rest?version=v4\",\n  \"https://www.googleapis.com/discovery/v1/apis/drive/v3/rest\"\n];\nexport const SCOPE =\n  \"https://www.googleapis.com/auth/spreadsheets https://www.googleapis.com/auth/drive.readonly\";\nexport const WARD_CODE_FIELD = \"Ward Code\";\nexport const WARD_NAME_FIELD = \"Ward Name\";\nexport const NON_COMPARISON_FIELDS = [\n  \"WD11CD\",\n  \"WD11CDO\",\n  \"WD11NM\",\n  \"WD11NMW\",\n  WARD_CODE_FIELD,\n  WARD_NAME_FIELD,\n  \"LA Name\",\n  \"Region\",\n  \"Rurality\",\n  \"Constituency\",\n  \"Constituency Code\",\n  \"GE 2017\"\n];\nexport const NORMALISED_EXTENSION = \"_¬NORMALISED¬\";\nexport const NORMALISED_EXTENSION_REGEXP = new RegExp(NORMALISED_EXTENSION);\nexport const RANKING_EXTENSION = \"_¬RANKING¬\";\nexport const RANKING_EXTENSION_REGEXP = new RegExp(RANKING_EXTENSION);\n\nexport const QUANTUM = 0.000001;\n\nexport const GEO_JSON_FILE = \"Ward GeoJSON LatLng.json\";\nexport const WARD_STATS_FILE = \"Ward stats 2\";\nexport const WARD_STATS_RANGE = \"API!A1:AD8571\";\n","/* global gapi */\nimport * as React from \"react\";\nimport {\n  Button,\n  makeStyles,\n  Theme,\n  createStyles,\n  useTheme\n} from \"@material-ui/core\";\nimport { green } from \"@material-ui/core/colors\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    button: {\n      marginTop: theme.spacing(3)\n    }\n  })\n);\n\ninterface IGoogleAuthProps {\n  apiKey: string;\n  clientId: string;\n  discoveryDocs: Array<string>;\n  scope: string;\n  signedInState: [boolean, (newState: boolean) => void];\n}\n\nexport const GoogleAuth: React.FC<IGoogleAuthProps> = ({\n  apiKey,\n  clientId,\n  discoveryDocs,\n  scope,\n  signedInState: [isSignedIn, updateIsSignedIn]\n}) => {\n  const theme = useTheme();\n  const classes = useStyles(theme);\n\n  const googleApi = React.useRef<typeof gapi | null>(null);\n\n  const handleSignIn = React.useCallback(() => {\n    if (googleApi.current) {\n      googleApi.current.auth2.getAuthInstance().signIn();\n    } else {\n      alert(\"Google API not loaded\");\n    }\n  }, [googleApi]);\n  const handleSignOut = React.useCallback(() => {\n    if (googleApi.current) {\n      googleApi.current.auth2.getAuthInstance().signOut();\n    } else {\n      alert(\"Google API not loaded\");\n    }\n  }, [googleApi]);\n\n  React.useEffect(() => {\n    gapi.load(\"client:auth2\", () => {\n      gapi.client\n        .init({\n          apiKey,\n          discoveryDocs,\n          clientId,\n          scope\n        })\n        .then(() => {\n          googleApi.current = gapi;\n          gapi.auth2.getAuthInstance().isSignedIn.listen(updateIsSignedIn);\n          updateIsSignedIn(gapi.auth2.getAuthInstance().isSignedIn.get());\n        })\n        .catch(err => console.error(err));\n    });\n  }, []);\n\n  return isSignedIn ? (\n    <Button\n      className={classes.button}\n      variant=\"contained\"\n      onClick={handleSignOut}\n    >\n      Sign Out\n    </Button>\n  ) : (\n    <Button\n      className={classes.button}\n      variant=\"contained\"\n      color=\"primary\"\n      onClick={handleSignIn}\n    >\n      Sign In\n    </Button>\n  );\n};\n","/* global gapi */\nimport * as React from \"react\";\nimport { debounce, DebounceSettings } from \"lodash\";\n\nimport { ApiResponse, Ward } from \"./types\";\n\nexport function useSheetData({\n  isSignedIn,\n  sheetName,\n  range\n}: {\n  isSignedIn: boolean;\n  sheetName: string;\n  range: string;\n}) {\n  const [\n    sheetDetails,\n    setSheetDetails\n  ] = React.useState<gapi.client.drive.File | null>(null);\n  const [sheetDataResponse, setSheetDataResponse] = React.useState<\n    ApiResponse<Array<Array<number | string>>>\n  >(ApiResponse.preload<Array<Array<number | string>>>());\n\n  React.useEffect(() => {\n    if (isSignedIn) {\n      gapi.client.drive.files\n        .list({\n          q: `name='${sheetName}'`,\n          pageSize: 1,\n          fields: \"nextPageToken, files(id, name)\"\n        })\n        .then(\n          response => {\n            setSheetDetails(\n              (response.result.files as Array<gapi.client.drive.File>)[0] ||\n                null\n            );\n          },\n          err => console.error(err)\n        );\n    }\n  }, [sheetName, isSignedIn]);\n\n  React.useEffect(() => {\n    if (sheetDetails && sheetDataResponse.isPreload()) {\n      const newSheetDataResponse = sheetDataResponse.load();\n      setSheetDataResponse(newSheetDataResponse);\n      gapi.client.sheets.spreadsheets.values\n        .get({\n          spreadsheetId: sheetDetails.id as string,\n          range,\n          majorDimension: \"ROWS\",\n          valueRenderOption: \"UNFORMATTED_VALUE\"\n        })\n        .then(\n          response => {\n            try {\n              if (!response.result.values) {\n                throw new Error(\"No value data returned\");\n              }\n              setSheetDataResponse(\n                newSheetDataResponse.resolve(\n                  response.result.values as Array<Array<number | string>>\n                )\n              );\n            } catch (err) {\n              console.error(err);\n            }\n          },\n          error => setSheetDataResponse(newSheetDataResponse.fail(error))\n        );\n    }\n  }, [isSignedIn, range, sheetDetails, sheetDataResponse]);\n\n  return sheetDataResponse;\n}\n\nexport function useDriveDocument({\n  isSignedIn,\n  filename\n}: {\n  isSignedIn: boolean;\n  filename: string;\n}) {\n  const [\n    geoJSONFileDetails,\n    setGeoJSONFileDetails\n  ] = React.useState<gapi.client.drive.File | null>(null);\n\n  const [geoJSONDataResponse, setGeoJSONDataResponse] = React.useState<\n    ApiResponse<GeoJSON.FeatureCollection>\n  >(ApiResponse.loading<GeoJSON.FeatureCollection>());\n\n  React.useEffect(() => {\n    if (isSignedIn) {\n      gapi.client.drive.files\n        .list({\n          q: `name='${filename}'`,\n          pageSize: 1,\n          fields: \"nextPageToken, files(id, name)\"\n        })\n        .then(\n          response => {\n            setGeoJSONFileDetails(\n              (response.result.files as Array<gapi.client.drive.File>)[0] ||\n                null\n            );\n          },\n          err => console.error(err)\n        );\n    }\n  }, [isSignedIn, filename]);\n\n  React.useEffect(() => {\n    if (geoJSONFileDetails) {\n      gapi.client.drive.files\n        .get({\n          fileId: geoJSONFileDetails.id as string,\n          alt: \"media\"\n        })\n        .then(\n          response => {\n            setGeoJSONDataResponse(\n              geoJSONDataResponse.resolve(\n                response.result as GeoJSON.FeatureCollection\n              )\n            );\n          },\n          error => setGeoJSONDataResponse(geoJSONDataResponse.fail(error))\n        );\n    }\n  }, [geoJSONFileDetails]);\n\n  return geoJSONDataResponse;\n}\n\nexport function useConvertGeoJSONData(\n  response: ApiResponse<GeoJSON.FeatureCollection>\n) {\n  return React.useMemo(() => {\n    const data = response.data();\n    const error = response.error();\n    if (data) {\n      return ApiResponse.loaded(\n        new Map(\n          data.features.map(\n            feature =>\n              [(feature.properties as any)[\"WD11CD\"], feature] as [string, Ward]\n          )\n        )\n      );\n    } else if (error) {\n      return ApiResponse.error<Map<string, Ward>>(error);\n    }\n    return ApiResponse.loading<Map<string, Ward>>();\n  }, [response]);\n}\n\nexport function useFileUploadButton<D>(\n  fileInputRef: React.MutableRefObject<HTMLInputElement | null>\n) {\n  const [response, setResponse] = React.useState<ApiResponse<D>>(\n    ApiResponse.loading<D>()\n  );\n  const fileReader = React.useMemo(() => {\n    const reader = new FileReader();\n    reader.onloadend = event => {\n      setResponse(\n        ApiResponse.loaded<D>(JSON.parse(reader.result as string) as D)\n      );\n    };\n    return reader;\n  }, [setResponse]);\n\n  const onChange = React.useCallback(\n    (event: React.ChangeEvent<HTMLInputElement>) => {\n      const file = (event.target.files as FileList)[0];\n      fileReader.readAsText(file);\n    },\n    [fileReader]\n  );\n  return [\n    {\n      ref: fileInputRef,\n      onChange\n    },\n    response\n  ] as [\n    {\n      ref: React.MutableRefObject<HTMLInputElement>;\n      onChange: React.ChangeEventHandler;\n    },\n    ApiResponse<D>\n  ];\n}\n\nexport function useDebouncedCallback<\n  C extends (...args: Array<any>) => any,\n  D extends Array<any>\n>(callback: C, dependencies: D, wait: number, maxWait: number): C {\n  const [refreshToken, setRefreshToken] = React.useState({});\n  const [maxWaitActive, setMaxWaitActive] = React.useState<boolean>(false);\n  const debounceTimeout = React.useRef<number | undefined>();\n  const maxWaitTimeout = React.useRef<number | undefined>();\n\n  React.useEffect(() => {\n    maxWaitTimeout.current = window.setTimeout(() => {\n      window.clearInterval(debounceTimeout.current);\n      if (maxWaitActive) {\n        setRefreshToken({});\n        setMaxWaitActive(false);\n      }\n    }, maxWait);\n    return () => window.clearTimeout(maxWaitTimeout.current);\n  }, [maxWaitActive, maxWait]);\n\n  React.useEffect(() => {\n    setMaxWaitActive(true);\n    debounceTimeout.current = window.setTimeout(() => {\n      setMaxWaitActive(false);\n      setRefreshToken({});\n    }, wait);\n    return () => window.clearTimeout(debounceTimeout.current);\n  }, [...dependencies, wait]);\n\n  React.useEffect(() => {\n    setMaxWaitActive(false);\n  }, [refreshToken]);\n\n  return React.useCallback<C>(callback, [refreshToken]);\n}\n\nexport function useDebounce<A extends Array<any>, R, D extends Array<any>>(\n  calc: () => R,\n  dependencies: D,\n  wait: number,\n  maxWait: number\n): R {\n  const [refreshToken, setRefreshToken] = React.useState({});\n  const [maxWaitActive, setMaxWaitActive] = React.useState<boolean>(false);\n  const debounceTimeout = React.useRef<number | undefined>();\n  const maxWaitTimeout = React.useRef<number | undefined>();\n\n  React.useEffect(() => {\n    maxWaitTimeout.current = window.setTimeout(() => {\n      window.clearInterval(debounceTimeout.current);\n      if (maxWaitActive) {\n        setRefreshToken({});\n        setMaxWaitActive(false);\n      }\n    }, maxWait);\n    return () => window.clearTimeout(maxWaitTimeout.current);\n  }, [maxWaitActive, maxWait]);\n\n  React.useEffect(() => {\n    setMaxWaitActive(true);\n    debounceTimeout.current = window.setTimeout(() => {\n      setMaxWaitActive(false);\n      setRefreshToken({});\n    }, wait);\n    return () => window.clearTimeout(debounceTimeout.current);\n  }, [...dependencies, wait]);\n\n  React.useEffect(() => {\n    setMaxWaitActive(false);\n  }, [refreshToken]);\n\n  return React.useMemo(() => calc(), [refreshToken]);\n}\n","import { IData, IWeightings, ScoreType } from \"./types\";\nimport {\n  NON_COMPARISON_FIELDS,\n  NORMALISED_EXTENSION,\n  RANKING_EXTENSION\n} from \"./constants\";\n\nexport interface INormalisedStats {\n  min: number;\n  range: number;\n}\n\nexport function getNormalisedStats(\n  dataArray: Array<IData>,\n  keys: Array<string>\n) {\n  const minMax = dataArray.reduce(\n    (stats, data) =>\n      keys.map((key, index) => ({\n        max: Math.max(stats[index].max, data[key] as number),\n        min: Math.min(stats[index].min, data[key] as number)\n      })),\n    keys.map(key => ({ max: -Infinity, min: Infinity }))\n  );\n  return keys.map((_, index) => ({\n    min: minMax[index].min,\n    range: minMax[index].max - minMax[index].min\n  }));\n}\n\nexport function normalise(\n  data: IData,\n  key: string,\n  { min, range }: INormalisedStats\n) {\n  const value = data[key] as number;\n  return (value - min) * range;\n}\n\nexport function addRankings(\n  dataArray: Array<IData>,\n  keys: Array<string>\n): Array<IData> {\n  const size = dataArray.length - 1;\n  keys.forEach(key => {\n    dataArray\n      // Rankings should be ASCENDING to maintain the same order of items as\n      // for the absolute values (and normalised values)\n      .sort((dataA, dataB) => (dataA[key] as number) - (dataB[key] as number))\n      .forEach((dataItem, index) => {\n        dataItem[`${key}${RANKING_EXTENSION}`] = index / size;\n      });\n  });\n  return dataArray;\n}\n\nexport function normaliseAll(dataArray: Array<IData>): Array<IData> {\n  const keys = Object.keys(dataArray[0]).filter(\n    header => !NON_COMPARISON_FIELDS.includes(header)\n  );\n  addRankings(dataArray, keys);\n  const stats = getNormalisedStats(dataArray, keys);\n  return dataArray.map(data => ({\n    ...data,\n    ...keys.reduce(\n      (objectSoFar, key, index) => ({\n        ...objectSoFar,\n        [`${key}${NORMALISED_EXTENSION}`]: normalise(data, key, stats[index])\n      }),\n      {}\n    )\n  }));\n}\n\nexport function csvToObjects(csv: Array<Array<number | string>>) {\n  const firstRow = csv[0];\n  return csv.slice(1).map(data =>\n    firstRow!.reduce((objectSoFar: IData, header, index) => {\n      objectSoFar[header] = data[index];\n      return objectSoFar;\n    }, {})\n  );\n}\n\nexport function calculateScore(weightings: IWeightings, properties: IData) {\n  return Object.keys(weightings).reduce((scoreSoFar: number, header) => {\n    const { weight, type } = weightings[header];\n    const headerName =\n      type === ScoreType.Normalised\n        ? `${header}${NORMALISED_EXTENSION}`\n        : type === ScoreType.Rank\n        ? `${header}${RANKING_EXTENSION}`\n        : header;\n    const value = (properties![headerName] as number) || 0;\n    return scoreSoFar + weight * value;\n  }, 0);\n}\n","import * as React from \"react\";\nimport { Ward, IWeightings } from \"./types\";\nimport {\n  Map as LeafletMap,\n  GeoJSON as LeafletGeoJSON,\n  TileLayer\n} from \"react-leaflet\";\nimport { LeafletEvent } from \"leaflet\";\nimport { WARD_CODE_FIELD } from \"./constants\";\nimport { calculateScore } from \"./utils\";\nimport { useDebouncedCallback } from \"./hooks\";\n\ninterface MapContainerProps {\n  readonly weightings: IWeightings;\n  readonly selectedWard: Ward | null;\n  readonly minScore: number;\n  readonly scoreRange: number;\n  readonly geoJsonToRender: Array<Ward> | null;\n  readonly setSelectedWard: (ward: Ward) => void;\n}\n\nexport const MapContainer: React.FC<MapContainerProps> = ({\n  weightings,\n  minScore,\n  scoreRange,\n  geoJsonToRender,\n  selectedWard,\n  setSelectedWard\n}) => {\n  const [zoom, setZoom] = React.useState(6);\n\n  const styleFeatures = useDebouncedCallback(\n    (feature?: GeoJSON.Feature) => {\n      if (!feature || !feature.properties) {\n        return {};\n      }\n      const { properties } = feature;\n      const isSelected =\n        selectedWard &&\n        properties[WARD_CODE_FIELD] ===\n          selectedWard.properties[WARD_CODE_FIELD];\n\n      const score =\n        (calculateScore(weightings, properties!) - minScore) / scoreRange;\n\n      return {\n        stroke: zoom > 9,\n        color: `rgba(0, 0, 0, ${isSelected ? 0.8 : 0.3})`,\n        weight: isSelected ? 2 : 1,\n        opacity: 0.6,\n        fill: true,\n        fillOpacity: Math.abs(0.5 - score) * 0.5 + 0.3,\n        fillColor: `rgb(${Math.max(\n          0,\n          Math.round(255 - score * 255)\n        )}, ${Math.min(255, Math.round(score * 255))}, 0)`\n      };\n    },\n    [zoom, weightings, minScore, scoreRange, selectedWard],\n    250,\n    1000\n  );\n\n  const onZoom = React.useCallback((event: LeafletEvent) => {\n    setZoom(event.target.getZoom());\n  }, []);\n\n  const onClick = React.useCallback((event: LeafletEvent) => {\n    setSelectedWard(event.layer.feature);\n  }, []);\n\n  return (\n    <LeafletMap zoom={zoom} center={[53.0, -1.75]} onZoom={onZoom}>\n      <TileLayer\n        attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n      />\n      {geoJsonToRender ? (\n        <LeafletGeoJSON\n          data={(geoJsonToRender as unknown) as GeoJSON.GeoJsonObject}\n          style={styleFeatures}\n          onClick={onClick}\n        />\n      ) : null}\n    </LeafletMap>\n  );\n};\n","import * as React from \"react\";\n\nimport { Ward } from \"./types\";\nimport {\n  WARD_NAME_FIELD,\n  WARD_CODE_FIELD,\n  NORMALISED_EXTENSION_REGEXP,\n  RANKING_EXTENSION_REGEXP\n} from \"./constants\";\nimport {\n  SwipeableDrawer,\n  Typography,\n  makeStyles,\n  Theme,\n  createStyles,\n  useTheme\n} from \"@material-ui/core\";\n\nconst IGNORED_FIELDS = [\n  \"WD11CD\",\n  \"WD11CDO\",\n  \"WD11NM\",\n  \"WD11NMW\",\n  WARD_CODE_FIELD,\n  WARD_NAME_FIELD\n];\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    drawer: {\n      padding: theme.spacing(2)\n    }\n  })\n);\n\ninterface IWardDetailsProps {\n  readonly selectedWard: Ward | null;\n  readonly score: number;\n  readonly rank: number;\n  readonly total: number;\n  readonly setSelectedWard: (ward: Ward | null) => void;\n}\n\nexport const WardDetails: React.FC<IWardDetailsProps> = ({\n  selectedWard,\n  score,\n  rank,\n  total,\n  setSelectedWard\n}) => {\n  const theme = useTheme();\n  const classes = useStyles(theme);\n\n  const onSwipeFactory = React.useCallback(\n    (ward: Ward | null) => () => {\n      setSelectedWard(ward);\n    },\n    []\n  );\n\n  const content = selectedWard ? (\n    <div className={classes.drawer}>\n      <Typography variant=\"h2\" component=\"h1\">\n        {selectedWard.properties[WARD_NAME_FIELD]}\n      </Typography>\n      <Typography>{selectedWard.properties[WARD_NAME_FIELD]}</Typography>\n      <Typography>Score: {Math.round(score * 10000) / 100}%</Typography>\n      <Typography>\n        Rank: {rank} of {total}\n      </Typography>\n      {Object.keys(selectedWard.properties).map(header =>\n        IGNORED_FIELDS.includes(header) ||\n        NORMALISED_EXTENSION_REGEXP.test(header) ||\n        RANKING_EXTENSION_REGEXP.test(header) ? null : (\n          <Typography key={header}>\n            {header}: {selectedWard.properties[header]}\n          </Typography>\n        )\n      )}\n    </div>\n  ) : null;\n  return (\n    <SwipeableDrawer\n      anchor=\"right\"\n      open={!!selectedWard}\n      onClose={onSwipeFactory(null)}\n      onOpen={onSwipeFactory(selectedWard)}\n    >\n      {content}\n    </SwipeableDrawer>\n  );\n};\n","import * as React from \"react\";\nimport { IWeightings, ScoreType } from \"./types\";\nimport {\n  SwipeableDrawer,\n  makeStyles,\n  Theme,\n  useTheme,\n  Fab,\n  createStyles,\n  FormControl,\n  Select,\n  TextField,\n  InputLabel\n} from \"@material-ui/core\";\nimport { Edit } from \"@material-ui/icons\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    fab: {\n      position: \"absolute\",\n      bottom: theme.spacing(2),\n      left: theme.spacing(2)\n    },\n    drawer: {\n      padding: theme.spacing(2)\n    },\n    entry: {\n      display: \"flex\",\n      flexWrap: \"nowrap\",\n      marginBottom: theme.spacing(2)\n    }\n  })\n);\n\ninterface IWeightingsProps {\n  weightings: IWeightings;\n  setWeightings: (weightings: IWeightings) => void;\n}\n\nexport const WeightingsEditor: React.FC<IWeightingsProps> = ({\n  weightings,\n  setWeightings\n}) => {\n  const theme = useTheme();\n  const classes = useStyles(theme);\n\n  const [isOpen, setIsOpen] = React.useState(false);\n  const onClickToggle = React.useCallback(() => {\n    setIsOpen(!isOpen);\n  }, [isOpen]);\n\n  const onChangeWeightFactory = React.useCallback(\n    (header: string) => (event: React.ChangeEvent<HTMLInputElement>) => {\n      setWeightings({\n        ...weightings,\n        [header]: {\n          type: weightings[header].type,\n          weight: parseFloat(event.currentTarget.value)\n        }\n      });\n    },\n    [weightings]\n  );\n\n  const onChangeScoreTypeFactory = React.useCallback(\n    (header: string) => (\n      event: React.ChangeEvent<{ name?: string; value: unknown }>\n    ) => {\n      setWeightings({\n        ...weightings,\n        [header]: {\n          weight: weightings[header].weight,\n          type: parseInt(event.currentTarget.value as string, 10) as ScoreType\n        }\n      });\n    },\n    [weightings]\n  );\n\n  return (\n    <React.Fragment>\n      <Fab\n        aria-label=\"Edit weightings\"\n        className={classes.fab}\n        color=\"primary\"\n        onClick={onClickToggle}\n      >\n        <Edit />\n      </Fab>\n      <SwipeableDrawer\n        open={isOpen}\n        onClose={onClickToggle}\n        onOpen={onClickToggle}\n      >\n        <div className={classes.drawer}>\n          {Object.keys(weightings).map(header => {\n            const { weight, type } = weightings[header];\n            return (\n              <div className={classes.entry} key={header}>\n                <TextField\n                  label={header}\n                  value={weight || 0}\n                  onChange={onChangeWeightFactory(header)}\n                />\n                <FormControl>\n                  <InputLabel>&nbsp;</InputLabel>\n                  <Select\n                    native\n                    onChange={onChangeScoreTypeFactory(header)}\n                    value={type}\n                  >\n                    <option value={ScoreType.Value}>Value</option>\n                    <option value={ScoreType.Normalised}>Normalised</option>\n                    <option value={ScoreType.Rank}>Rank</option>\n                  </Select>\n                </FormControl>\n              </div>\n            );\n          })}\n        </div>\n      </SwipeableDrawer>\n    </React.Fragment>\n  );\n};\n","import * as React from \"react\";\n\nimport { MapContainer } from \"./MapContainer\";\nimport { WardDetails } from \"./WardDetails\";\nimport { WeightingsEditor } from \"./WeightingsEditor\";\nimport { Ward, IWeightings, IData } from \"./types\";\nimport { useDebounce } from \"./hooks\";\nimport { WARD_CODE_FIELD, QUANTUM } from \"./constants\";\nimport { calculateScore } from \"./utils\";\n\ninterface IDataContainerProps {\n  sheetData: Array<IData>;\n  geoJsonData: Map<string, Ward>;\n  weightings: IWeightings;\n  selectedWard: Ward | null;\n  setSelectedWard: (ward: Ward | null) => void;\n  setWeightings: (weightings: IWeightings) => void;\n}\n\nexport const DataContainer: React.FC<IDataContainerProps> = ({\n  sheetData,\n  geoJsonData,\n  weightings,\n  selectedWard,\n  setSelectedWard,\n  setWeightings\n}) => {\n  const geoJsonToRender = React.useMemo(() => {\n    if (!sheetData || !geoJsonData) return null;\n    const features: Array<Ward> = sheetData.map(data => {\n      const wardCode = data[WARD_CODE_FIELD] as string;\n      const feature = geoJsonData.get(wardCode);\n      return {\n        ...feature!,\n        properties: { ...feature!.properties, ...data }\n      };\n    });\n    return features;\n  }, [sheetData, geoJsonData]);\n\n  const { minScore, scoreRange } = useDebounce(\n    () => {\n      if (!geoJsonToRender) return { minScore: 0, scoreRange: QUANTUM };\n      const { minScore, maxScore } = geoJsonToRender.reduce(\n        (\n          { minScore, maxScore }: { minScore: number; maxScore: number },\n          { properties }\n        ) => {\n          const score = calculateScore(weightings, properties!);\n          return {\n            minScore: Math.min(minScore, score),\n            maxScore: Math.max(maxScore, score)\n          };\n        },\n        { minScore: Infinity, maxScore: -Infinity }\n      );\n      return { minScore, scoreRange: maxScore - minScore + QUANTUM };\n    },\n    [geoJsonToRender, weightings],\n    2000,\n    5000\n  );\n\n  const rankings = useDebounce(\n    () => {\n      return new Map(\n        sheetData\n          .map((dataItem): [string, number] => [\n            dataItem[WARD_CODE_FIELD] as string,\n            (calculateScore(weightings, dataItem) - minScore) / scoreRange\n          ])\n          .sort(([_, scoreA], [__, scoreB]) => scoreB - scoreA)\n          .map(\n            ([wardCode, score], index) =>\n              [wardCode, { score, rank: index + 1 }] as [\n                string,\n                { score: number; rank: number }\n              ]\n          )\n      );\n    },\n    [weightings, sheetData, minScore, scoreRange],\n    2000,\n    5000\n  );\n\n  const { score, rank } = React.useMemo(() => {\n    return (\n      rankings.get(\n        selectedWard ? selectedWard.properties[WARD_CODE_FIELD] : \"\"\n      ) || { score: 0, rank: 0 }\n    );\n  }, [rankings, selectedWard]);\n\n  return (\n    <div className=\"data-container\">\n      <MapContainer\n        weightings={weightings}\n        selectedWard={selectedWard}\n        minScore={minScore}\n        scoreRange={scoreRange}\n        geoJsonToRender={geoJsonToRender}\n        setSelectedWard={setSelectedWard}\n      />\n      <WardDetails\n        selectedWard={selectedWard}\n        setSelectedWard={setSelectedWard}\n        score={score}\n        rank={rank}\n        total={sheetData.length}\n      />\n      <WeightingsEditor weightings={weightings} setWeightings={setWeightings} />\n    </div>\n  );\n};\n","const OBJECT_STORE_MODIFIER = \"_os\";\n\nexport function openIndexedDB(\n  databaseName: string\n): Promise<IDBDatabase | null> {\n  if (!(\"indexedDB\" in window)) {\n    return Promise.resolve(null);\n  }\n\n  return new Promise(resolve => {\n    const request = window.indexedDB.open(databaseName, 2);\n    request.onerror = function(error) {\n      console.error(`Could not open DB ${databaseName}`);\n      console.error(error);\n      resolve(null);\n    };\n    request.onsuccess = function() {\n      console.info(`Opened DB ${databaseName}`);\n      resolve(request.result);\n    };\n    request.onupgradeneeded = function(\n      this: IDBOpenDBRequest,\n      event: IDBVersionChangeEvent\n    ) {\n      console.info(`Setting up DB ${databaseName}`);\n      const db = this.result;\n      const osName = databaseName + OBJECT_STORE_MODIFIER;\n      const objectStore = db.createObjectStore(osName, {\n        keyPath: \"id\"\n      });\n      objectStore.transaction.oncomplete = function() {\n        resolve(db);\n      };\n    };\n  });\n}\n\nexport function getIndexedDBValue<T, S>(\n  dbPromise: Promise<IDBDatabase | null>,\n  key: string,\n  fallback: (key: string) => Promise<S>,\n  deserialiser: (jsonPromise: Promise<S>) => Promise<T>\n): Promise<T> {\n  return dbPromise.then<T>(db => {\n    if (!db) {\n      return deserialiser(fallback(key));\n    }\n\n    return new Promise<T>(resolve => {\n      const os = db\n        .transaction([db.name + OBJECT_STORE_MODIFIER], \"readwrite\")\n        .objectStore(db.name + OBJECT_STORE_MODIFIER);\n      const readRequest = os.get(key);\n      readRequest.onerror = function(error) {\n        console.error(`Could not read key ${key} from DB ${db.name}`);\n        console.error(error);\n        return deserialiser(fallback(key));\n      };\n      readRequest.onsuccess = function() {\n        if (readRequest.result) {\n          return resolve(\n            deserialiser(Promise.resolve(readRequest.result.value))\n          );\n        }\n\n        Promise.resolve(fallback(key)).then(result => {\n          const writeOs = db\n            .transaction([db.name + OBJECT_STORE_MODIFIER], \"readwrite\")\n            .objectStore(db.name + OBJECT_STORE_MODIFIER);\n          const writeRequest = writeOs.add({ id: key, value: result });\n          writeRequest.onerror = function(error) {\n            console.error(`Could not write new key ${key} to DB ${db.name}`);\n            console.error(error);\n          };\n          return resolve(deserialiser(Promise.resolve(result)));\n        });\n      };\n    });\n  });\n}\n","/* global gapi */\nimport * as React from \"react\";\nimport { debounce, DebounceSettings } from \"lodash\";\n\nimport { ApiResponse, Ward, SheetData, ConvertedGeoJSONData } from \"./types\";\n\nexport async function getSheetData({\n  sheetName,\n  range\n}: {\n  sheetName: string;\n  range: string;\n}) {\n  const sheetDetails: any = await new Promise((resolve, reject) =>\n    gapi.client.drive.files\n      .list({\n        q: `name='${sheetName}'`,\n        pageSize: 1,\n        fields: \"nextPageToken, files(id, name)\"\n      })\n      .then(\n        response =>\n          resolve(\n            (response.result.files as Array<gapi.client.drive.File>)[0] || null\n          ),\n        error => {\n          reject(error);\n        }\n      )\n  );\n  if (!sheetDetails) {\n    throw new Error(\"Cannot find sheet.\");\n  }\n  const sheetData = await new Promise<SheetData>((resolve, reject) =>\n    gapi.client.sheets.spreadsheets.values\n      .get({\n        spreadsheetId: sheetDetails.id as string,\n        range,\n        majorDimension: \"ROWS\",\n        valueRenderOption: \"UNFORMATTED_VALUE\"\n      })\n      .then(\n        response => {\n          if (!response.result.values) {\n            return reject(\"No value data returned.\");\n          }\n          resolve(response.result.values as Array<Array<number | string>>);\n        },\n        error => {\n          reject(error);\n        }\n      )\n  );\n  return sheetData;\n}\n\nexport async function getDriveDocument<T>({ filename }: { filename: string }) {\n  const geoJSONFileDetails: any = await new Promise((resolve, reject) =>\n    gapi.client.drive.files\n      .list({\n        q: `name='${filename}'`,\n        pageSize: 1,\n        fields: \"nextPageToken, files(id, name)\"\n      })\n      .then(\n        response => {\n          resolve(\n            (response.result.files as Array<gapi.client.drive.File>)[0] || null\n          );\n        },\n        error => {\n          reject(error);\n        }\n      )\n  );\n\n  if (!geoJSONFileDetails) {\n    throw new Error(\"Cannot find document.\");\n  }\n\n  const geoJSONDataResponse = await new Promise((resolve, reject) =>\n    gapi.client.drive.files\n      .get({\n        fileId: geoJSONFileDetails.id as string,\n        alt: \"media\"\n      })\n      .then(\n        response => resolve(response.result as GeoJSON.FeatureCollection),\n        error => {\n          reject(error);\n        }\n      )\n  );\n\n  return geoJSONDataResponse as T;\n}\n\nexport async function convertGeoJSONData(\n  responsePromise: Promise<GeoJSON.FeatureCollection>\n): Promise<ApiResponse<ConvertedGeoJSONData>> {\n  return responsePromise\n    .then(response =>\n      ApiResponse.loaded<ConvertedGeoJSONData>(\n        new Map(\n          response.features.map(\n            feature =>\n              [(feature.properties as any)[\"WD11CD\"], feature] as [string, Ward]\n          )\n        )\n      )\n    )\n    .catch(error => ApiResponse.error<ConvertedGeoJSONData>(error));\n}\n\nexport function useFileUploadButton<D>(\n  fileInputRef: React.MutableRefObject<HTMLInputElement | null>\n) {\n  const [response, setResponse] = React.useState<ApiResponse<D>>(\n    ApiResponse.loading<D>()\n  );\n  const fileReader = React.useMemo(() => {\n    const reader = new FileReader();\n    reader.onloadend = event => {\n      setResponse(\n        ApiResponse.loaded<D>(JSON.parse(reader.result as string) as D)\n      );\n    };\n    return reader;\n  }, [setResponse]);\n\n  const onChange = React.useCallback(\n    (event: React.ChangeEvent<HTMLInputElement>) => {\n      const file = (event.target.files as FileList)[0];\n      fileReader.readAsText(file);\n    },\n    [fileReader]\n  );\n  return [\n    {\n      ref: fileInputRef,\n      onChange\n    },\n    response\n  ] as [\n    {\n      ref: React.MutableRefObject<HTMLInputElement>;\n      onChange: React.ChangeEventHandler;\n    },\n    ApiResponse<D>\n  ];\n}\n\nexport function useDebouncedCallback<\n  C extends (...args: Array<any>) => any,\n  D extends Array<any>\n>(callback: C, dependencies: D, wait: number, maxWait: number): C {\n  const [refreshToken, setRefreshToken] = React.useState({});\n  const [maxWaitActive, setMaxWaitActive] = React.useState<boolean>(false);\n  const debounceTimeout = React.useRef<number | undefined>();\n  const maxWaitTimeout = React.useRef<number | undefined>();\n\n  React.useEffect(() => {\n    maxWaitTimeout.current = window.setTimeout(() => {\n      window.clearInterval(debounceTimeout.current);\n      if (maxWaitActive) {\n        setRefreshToken({});\n        setMaxWaitActive(false);\n      }\n    }, maxWait);\n    return () => window.clearTimeout(maxWaitTimeout.current);\n  }, [maxWaitActive, maxWait]);\n\n  React.useEffect(() => {\n    setMaxWaitActive(true);\n    debounceTimeout.current = window.setTimeout(() => {\n      setMaxWaitActive(false);\n      setRefreshToken({});\n    }, wait);\n    return () => window.clearTimeout(debounceTimeout.current);\n  }, [...dependencies, wait]);\n\n  React.useEffect(() => {\n    setMaxWaitActive(false);\n  }, [refreshToken]);\n\n  return React.useCallback<C>(callback, [refreshToken]);\n}\n\nexport function useDebounce<A extends Array<any>, R, D extends Array<any>>(\n  calc: () => R,\n  dependencies: D,\n  wait: number,\n  maxWait: number\n): R {\n  const [refreshToken, setRefreshToken] = React.useState({});\n  const [maxWaitActive, setMaxWaitActive] = React.useState<boolean>(false);\n  const debounceTimeout = React.useRef<number | undefined>();\n  const maxWaitTimeout = React.useRef<number | undefined>();\n\n  React.useEffect(() => {\n    maxWaitTimeout.current = window.setTimeout(() => {\n      window.clearInterval(debounceTimeout.current);\n      if (maxWaitActive) {\n        setRefreshToken({});\n        setMaxWaitActive(false);\n      }\n    }, maxWait);\n    return () => window.clearTimeout(maxWaitTimeout.current);\n  }, [maxWaitActive, maxWait]);\n\n  React.useEffect(() => {\n    setMaxWaitActive(true);\n    debounceTimeout.current = window.setTimeout(() => {\n      setMaxWaitActive(false);\n      setRefreshToken({});\n    }, wait);\n    return () => window.clearTimeout(debounceTimeout.current);\n  }, [...dependencies, wait]);\n\n  React.useEffect(() => {\n    setMaxWaitActive(false);\n  }, [refreshToken]);\n\n  return React.useMemo(() => calc(), [refreshToken]);\n}\n","// Remove this eventually\n/* global gapi */\nimport * as React from \"react\";\nimport { render } from \"react-dom\";\nimport { Container, createMuiTheme } from \"@material-ui/core\";\nimport { ThemeProvider } from \"@material-ui/styles\";\n\nimport {\n  API_KEY,\n  CLIENT_ID,\n  DISCOVERY_DOCS,\n  SCOPE,\n  NON_COMPARISON_FIELDS,\n  NORMALISED_EXTENSION_REGEXP,\n  RANKING_EXTENSION_REGEXP,\n  WARD_STATS_FILE,\n  WARD_STATS_RANGE\n} from \"./constants\";\nimport { GoogleAuth } from \"./GoogleAuth\";\nimport { useFileUploadButton } from \"./hooks\";\nimport { FeatureCollection, Feature, Polygon } from \"geojson\";\nimport {\n  Ward,\n  IWeightings,\n  ScoreType,\n  SheetData,\n  ApiResponse,\n  IData\n} from \"./types\";\nimport { csvToObjects, normaliseAll } from \"./utils\";\nimport { DataContainer } from \"./DataContainer\";\nimport { openIndexedDB, getIndexedDBValue } from \"./indexedDB\";\nimport {\n  getSheetData,\n  getDriveDocument,\n  convertGeoJSONData\n} from \"./non-hooks\";\nimport { ConvertedGeoJSONData } from \"./types\";\nimport { GEO_JSON_FILE } from \"./constants\";\n\nimport \"./styles.css\";\n\nconst dbName = \"ward-stats\";\n\nconst theme = createMuiTheme();\n\nfunction App() {\n  const fileInputRef = React.useRef<HTMLInputElement | null>(null);\n  const [uploadDataProps, data] = useFileUploadButton<FeatureCollection>(\n    fileInputRef\n  );\n  const [weightings, setWeightings] = React.useState<IWeightings | null>(null);\n  const [sheetDataResponse, setSheetDataResponse] = React.useState<\n    ApiResponse<Array<IData>>\n  >(ApiResponse.preload<Array<IData>>());\n  const [geoJsonDataResponse, setGeoJsonDataResponse] = React.useState<\n    ApiResponse<ConvertedGeoJSONData>\n  >(ApiResponse.preload<ConvertedGeoJSONData>());\n  const signedInState = React.useState(false);\n  const [isSignedIn] = signedInState;\n\n  const dbPromise = React.useMemo(() => openIndexedDB(dbName), []);\n\n  const makeConvertedSheetData = React.useCallback(async () => {\n    if (!isSignedIn) {\n      return Promise.reject(\"Not signed in\");\n    }\n    return await getSheetData({\n      sheetName: WARD_STATS_FILE,\n      range: WARD_STATS_RANGE\n    }).then((sheetData: SheetData) => normaliseAll(csvToObjects(sheetData)));\n  }, [isSignedIn]);\n\n  const wrapInApiResponse = React.useCallback<\n    <T extends any>(valuePromise: Promise<T>) => Promise<ApiResponse<T>>\n  >(<T extends any>(valuePromise: Promise<T>) => {\n    return valuePromise\n      .then(value => ApiResponse.loaded<T>(value))\n      .catch(error => ApiResponse.error<T>(error));\n  }, []);\n\n  React.useEffect(() => {\n    if (!isSignedIn) {\n      return;\n    }\n    getIndexedDBValue<ApiResponse<Array<IData>>, Array<IData>>(\n      dbPromise,\n      \"sheetData\",\n      makeConvertedSheetData,\n      wrapInApiResponse\n    ).then(newValue => {\n      setSheetDataResponse(newValue);\n    });\n  }, [isSignedIn, dbPromise, makeConvertedSheetData]);\n\n  React.useEffect(() => {\n    const data = sheetDataResponse.data();\n    if (data && !weightings) {\n      setWeightings(\n        Object.keys(data[0]).reduce((objectSoFar: IWeightings, header) => {\n          if (\n            !NON_COMPARISON_FIELDS.includes(header) &&\n            !NORMALISED_EXTENSION_REGEXP.test(header) &&\n            !RANKING_EXTENSION_REGEXP.test(header)\n          ) {\n            objectSoFar[header] = { weight: 0, type: ScoreType.Normalised };\n          }\n          return objectSoFar;\n        }, {})\n      );\n    }\n  }, [sheetDataResponse]);\n\n  const makeGeoJsonData = React.useCallback(() => {\n    if (!isSignedIn) {\n      return Promise.reject(\"Not signed in\");\n    }\n    return getDriveDocument<GeoJSON.FeatureCollection>({\n      filename: GEO_JSON_FILE\n    });\n  }, [isSignedIn]);\n\n  React.useEffect(() => {\n    if (!isSignedIn) {\n      return;\n    }\n    getIndexedDBValue<\n      ApiResponse<ConvertedGeoJSONData>,\n      GeoJSON.FeatureCollection\n    >(dbPromise, \"geoJSON\", makeGeoJsonData, convertGeoJSONData).then(\n      newValue => {\n        setGeoJsonDataResponse(newValue);\n      }\n    );\n  }, [isSignedIn, dbPromise, makeGeoJsonData]);\n\n  const [selectedWard, setSelectedWard] = React.useState<Ward | null>(null);\n\n  const sheetData = sheetDataResponse.data();\n  const geoJsonData = geoJsonDataResponse.data();\n\n  return (\n    <ThemeProvider theme={theme}>\n      <div className=\"App\">\n        <Container>\n          <GoogleAuth\n            apiKey={API_KEY}\n            clientId={CLIENT_ID}\n            discoveryDocs={DISCOVERY_DOCS}\n            scope={SCOPE}\n            signedInState={signedInState}\n          />\n          {sheetData && geoJsonData && weightings ? (\n            <DataContainer\n              sheetData={sheetData}\n              geoJsonData={geoJsonData}\n              weightings={weightings}\n              selectedWard={selectedWard}\n              setSelectedWard={setSelectedWard}\n              setWeightings={setWeightings}\n            />\n          ) : sheetDataResponse.isLoading() ||\n            geoJsonDataResponse.isLoading() ? (\n            <p>Loading...</p>\n          ) : (\n            <React.Fragment>\n              {sheetDataResponse.error() ? (\n                <p>{sheetDataResponse.error()}</p>\n              ) : null}\n              {geoJsonDataResponse.error() ? (\n                <p>{geoJsonDataResponse.error()}</p>\n              ) : null}\n            </React.Fragment>\n          )}\n        </Container>\n      </div>\n    </ThemeProvider>\n  );\n}\n\nconst rootElement = document.getElementById(\"root\");\nrender(<App />, rootElement);\n"],"sourceRoot":""}